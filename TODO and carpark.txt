


TODO 

// tidy notes put in sections

should be able just to report when press return-test

//no longer reports where rover would cross bound - test

-- zf10e3n2 - says successful but isnt

-- //make individual rover reports show the boundaries of each rover

-- improve text strings generally -- do when make the tests --add "press k to see keys" when wrong input 
-- do unit tests

-- remove reflections from dictionaries

-- dictionary singleton thing going into dictionary make the dictionary then add them seleves -- make behaviour part of their parent class
-- look into alternatives for statics, and look at partial classe
//why dictionary of dictionaries why not something else, a list for example?
//why not one dictionary that grabs all movement types but those types are in own namespace so can be checked for name space if userinterface wants to seperate them by type e.g. move and face commands
dictionaries should hold their own name string
-- rovers add remove themselves?
-- *dictionaries build themselves from children of a class

-- dictionary of dictionaries - which keys can access -- update method for checking if keys are available to use dictionary
-- dictionary manager does all checks for whats in what dictionary

-- research methods for associating a method with a key press


-- introduce unexpected obstacle -- known and unknow sectors 
-- when one rover hits obstacle all should stop and wait for further instruction 
-- return what of string executed and what not
-- return which rovers still in sequence would be effected - e.g. were going to cross that spot
-- options rovers should continue anyway
-- start with obstacle dictionary (but will have 2 keys)
-- validate using their location and rover locations as obsticals



-- do not seperate interface and move commands allow both to be done in same string - cant do with create --  with keys doesnt make sense, -- quit doesnt make sense -- update maybe but get it anyway so its only destroy -- look at again when do science inputs
-- have to destroy bool then if later in string if it is called can do a specific error and wont destroy unless execution successful
--scienceAction commands e.g. sample, soil, air, -- store data and then map report for soil, air, -- obstacles
-- work action  -- clear obstacle -- rock - destroy - pit fill (probablility success)

--refactor each class
--update umc chart relationships
--can we should we, replace all the movement orientation classes with one class that has variables for setting positive or negative for how it alters location coordinates, and create an instance with each version
--review the difference between userinterface inteface keys class which uses hiding  and others which sety valuie in getter 
--Review purpose of classes in light of new design requirement doc, validation having too much and location information having too much is a risk

 *********Need a locationInformation interface and then both validating and executing can have the interface and the report of an route error or route exection will take an object of that interface
 *********Or reporting has two methods depending on the input it takes validation for a fail and it takes location for a success -- could still use interface

		--- location info now holds what it is info for, so could just make every location info that is made add itself to a list, 
		--- but we store the previous location of moving objects so with a bool for historic
		--- and a destroy create for populating the list
		--- currently use classes but structs are value types, consider passing refs, or structs instead -- but then would we beable to change a location to historic, or testLocation and it update in the list ... no


		---locationInfo should be passed instead of validation -> if fail pass the location info of the fail, if succeed pass the list of moves --- (do this by having the execute command create a location information list (and also update the main list)
--- would need list of location executed, and last executed, the latter being the ones from the just executed command string
---the correct constructor may work. 



---->locationInfo and orientation are classes but this means copying them requires cloning - read up on cloning, using structs insted or passing references
-- key behaviour is to be able to copy them and then revert. for testing the routes


https://stackoverflow.com/questions/7477073/made-one-instance-of-a-class-equal-to-another-how-to-cancel-that

----------------------------------------------------------------------------------------------------***********-----





//next steps get working with code smells



-----validation, reporting, 
//ReportLocationSingleRover() - this needs to take a rover, and be run through the dictionary - or be given the rover names in order they were in, last rover it says currently selected rover

//look at removing rovervalidation tasks and command key validation and replacing with a report and plan the class

//do report class remembers location and ... or if rover had their last report ... should we be even adding the reports

//keeping a rovers history that they can report

4. Revise design pattern command put notes in the file
5. Revise other relevant design patterns
6. Make changes or just make notes on how would implement:
	*left right sideways movement

	
	*part ordinates face left or right. vs step left right vs turn to next ordinate left or right - up and down an enum in order of angle around compass
7. Tidy it up so works smooth english correct
8. Put it online
script explaining design
youtube
website
explanatory document

//will need to handle error if something gets through to manager that isnt in dictionary

//learning about error handling what to wrap in try get and what not to will be important

//who should be responsible to checking if space available rover checks with manager only to tell manager or rover send up a move at a time

//question of passing rover string or single char

//rover manages what movement looks like rover manager says if it is allowed 

chang command to moveCommands change look to face.


Notes on what not implemented but how would e.g. : Then can when new ordinates made eg NE then it will be inserted in the right order

Move Left Move Right Turn Left One Ordinate, Turn Right One ordinate


My understanding of Get Set and this needs revising look at the Location interface and constructor then research

Should build own dictionary still

This is not exactly command pattern could i make it more like it - go back and watch command pattern stuff

LookNorth could be just look if it took an orientation object, 
the type of object could be set in the dictionary but it would then have a different signature

still struggling with open close principle and setting the key presses

trying to make it so only need add class in one place to need it 

if want to do left and right could do an enum for the directions cycle through them and loop round
-maybe next rover

multiple rovers - 1-2-3-4 to set up, check if they are going to crash- next phase


View user interface control the command model the rovers and the positions - could mvc be appplicable?

Commands should have their own key in their class that the dictionary takes, and a description so that the dictionary can get the classes 
and build itself and the keys, it should also be able to when user interface goes through the commands provide a description of what each does

should the rover force checking of valid command sequence in its method to stop later it being called without or because it is not the brain should it just rely on one always being called then the other
I think the answer will be to do with errors and validation

Need to protect  my fields  more theyre often public rather than private with get set


	Revise (lambda) context this:
	static StaticCommandFactoryDic() {
			var commands = Assembly.GetAssembly(typeof(Command)).GetTypes()
				.Where(myCommand => myCommand.IsClass && !myCommand.IsAbstract && myCommand.IsSubclassOF(typeof(Ability)));
		}

		Is it possible to have a folder and just ask the dictionary to put all classes in the folder into  itself? or a namespace?





		
			Orientation newRoverOrientation; // this does work because have no was of setting an orientation just of applying one 
			//to a current locationInfor
			//therefore will need to make a location Information and then apply the command face east to overide our default
			//this may be bad design so maybe I should be setting all orientations based on degrees or radians starting north

			//We have to initialise a location with default values and overwrite it because we can over write an orientation but we have now way of just making one

should useInterface do all talking and make an object for managing rovers



		When request feedback:
		how order folders 
		how add to userInterface despite open close e.g. a report command saying where all rovers are


		Orientation movement information could be built in to FaceEast etc maybe or not it needs to remember direction is facing, ... 
		but that could just be that location info holds an orientation delegate
		... would that still work if later wanted to move left you would look at the delegate and change it accordingly
		...FaceLeft FaceRight would be relative movements they would check change orientation delegate. StepLeft, StepRight would do the same but also execute the delegate.
		Former orientation commands the latter movement command but inherit same abstract just in different dictionaries, as will seperate them
		//this would mean on set up can just delegate by letter when creating the rover insteadof overwriting
		//how would this work with getting report you are facing left-- dictionary if holding functions not objects then more sections, this wont be command anymore
		//"Key", "Instruction string e.g. command makes the rover FaceLeft ... or stepLeft"
		//so maybe command for movements, delegate for orientations

				Rover selectedRover;// = new Rover(new LocationInfo(new North(), 0, 0, 0, 10, 0, 10));
		//maybe dictionary should hold this and getter and setter should alter the selectedRover
		//or being an object will changes translate anywya
		//maybe should store test rover here too 
		//and make dictionary rover manager


		//should rover move itself or should it be moved, should it test itself

		//seperate test and rover because actual movement would involve more than checking route

		//userinterface should look make sure command string only has commands from rover manager and orientation in then pass it on
		//user interface should be for validating and then passing on the instructions not executing them



		the destroy rover command could use a rover destructor which removes it from dic and destroy it
		for test it could just remove itself from the dictionary
		removed rovers could be readded at the end of the test
		-where should responsibility lie from removing from the dictionary and destroying
		-maybe removing from dictionary is dictionaries responsibility and destroy is rovers 
		-need to look into whether destroy would fit abstract command pattern
		-no it shouldnt because those commands are all about move actions 

		overload the add opperator for add report responses from rover

		//should task validation be an interface?

		//for own simplicity have made long string command short string instruction but this is not necessary
		//later version if letter is not in the command dictionary but it is in other dictionary it runs it --No because will still be testing
		--could slice long command string up and report back "Command string 1 exectute then report""command string 2 execute then report" so all though
		it is only one in put it should cut it up and receive it as an array of seperate commands

		/// next version should not move distinct ammounts but degrees and meters

		/////////////should console useroutput when shows user what they typed seperate it into command string and interface letters so they can see
		//should acceptnumbers for f100 which mean f 100 times


							doing lots of loops and things twice because of testing the route is there a way to reduce this

		I could execute a substring per test this would mean not having to remember when they are incase they crash

		
		interface KeyInputs use reflection  to do this - all have string that is their key all have a string what key does - key for bringing up list instructions, rovers and commands

		Choose words per string e.g. inputString roverCommandString instructionsString

		//if i combine the below save in notes i have see if it is good decision - single repsonsibility principle.
		commandkey validation method and rovertasksvalidation maybe should be the same object compare with checkprocessusercommand input


		// get and set could it just be private string instruction without get and set? = Dictionary keys + Move keys

		//should it be executing per successful rover my design choice was no

		//should i pass only string builders and make them into string in conolewriteline

		revise get set
		revise interface with abstract
		revise hiding with abstract
		do solo learn again
		
		Next proj
		Linq, sql, - could use multi delegate matrix version rover with sql some how get advice


		it would nice to have a set that automatically updates when ever dictionaries changed --- not necessary here
		
		//but would be nice to know if can - but think needs listners

		//getter setter when to use method or get set
		https://stackoverflow.com/questions/601621/properties-vs-methods
		https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms229054(v=vs.100)?redirectedfrom=MSDN


		

		//how to structure name spaces
		//keep list questions like this somewhere so remember to ask ppl - git?

		difference between names space and modules

		would like to get rid of this var          var turnCommands = Assembly.GetAssembly(typeof(MoveCommand)).GetTypes()

		really need to go over naming conventions for names space class method dic interface, capitalisation and verb noun namesetc

		//yuck hardcoded ---                   .Where(driveCommand => driveCommand.IsClass && !driveCommand.IsAbstract && driveCommand.IsSubclassOf(typeof(MoveCommand))&& (driveCommand.Namespace == "DriveCommandsNS")); 



	could put all givtioanries into dictionary manager but that seems against open close cant just add new dictionary
	//also how give the dictionaries name if name stic all will be static

	//does this mean singleton pattern insted
	



	  //instead of having to check dictionary and pass the rover should task validation be able to provide info for report
				//Or contain the rover the have validated
				//or should the rover hold its last task validation - would need to be a list if it is called multiple time in a command string


				//validate command sequence should return a list aswell or return the list of rovers so you know none moved





-- rover have history of actions and can be told to retrace their steps

				
-------------------- Notes on what isnt in but could be added ---------------

To add move leftwards and rightwards movement would need to put in a order to NESW with enum or array and then loow if going W to N
Would get current location orientation and use the orientation one less or one more depending if want right or left movement
